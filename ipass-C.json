[
  {
    "id": 1,
    "question": "公司希望在兩週內推出一款簡單的問卷系統，並可能日後擴充與內部 ERP 集成，下列做法最合適？",
    "options": [
      "A. 使用完全 No Code 平台，後期再考慮自訂開發",
      "B. 手寫所有後端 API 與前端介面",
      "C. 選用 Low Code 平台，初期可視化配置，關鍵點插入自訂程式碼",
      "D. 只購買現成商業問卷工具"
    ],
    "answer": "C",
    "explanation": "初期需要快速上線且後期要整合 ERP，Low Code 平台既能可視化開發，又能插入自訂程式碼，兼顧速度與擴展性。"
  },
  {
    "id": 2,
    "question": "某 Low Code 平台未提供特定安全驗證元件，下列何者為合理的解決方案？",
    "options": [
      "A. 放棄該功能，直接將驗證交給使用者",
      "B. 自行撰寫 JavaScript 插件並透過平台擴充機制整合",
      "C. 將功能外包給第三方服務，完全跳過平台",
      "D. 等待平台官方下個月更新"
    ],
    "answer": "B",
    "explanation": "Low Code 平台通常提供擴充 SDK，可撰寫自訂插件以補足平台缺失，並保持整體架構的一致性。"
  },
  {
    "id": 3,
    "question": "在判斷某工具屬於 No Code 而非 Low Code 時，下列哪項指標最具說服力？",
    "options": [
      "A. 平台是否開放程式碼匯出",
      "B. 平台 UI 是否美觀",
      "C. 可否透過拖拉組件完成全部邏輯，不需插入任何程式碼",
      "D. 是否有社群討論區"
    ],
    "answer": "C",
    "explanation": "No Code 平台強調「零程式碼」，即所有業務邏輯皆可透過視覺化配置完成，無需任何手寫程式。"
  },
  {
    "id": 4,
    "question": "假設業務團隊想自己修改某段流程，但平台僅提供 Low Code 模式，下列何者為最佳做法？",
    "options": [
      "A. 業務自行嘗試編寫複雜程式碼",
      "B. 與 IT 合作利用平台內建程式碼區段進行少量自訂",
      "C. 提交完整變更需求，由 IT 重構整個系統",
      "D. 停用這段流程，改用手動表單"
    ],
    "answer": "B",
    "explanation": "Low Code 平台通常允許在視覺化流程中插入程式碼段，業務可與 IT 協作完成自訂功能，而不必全盤重寫。"
  },
  {
    "id": 5,
    "question": "團隊正在評估新平台，若關鍵評估點為「能否導出完整業務邏輯」，最應查詢哪項功能？",
    "options": [
      "A. 可視化拖拉元件列表",
      "B. 是否支持流程/程式碼匯出到 JSON 或 Git",
      "C. 平台顏色主題設定",
      "D. 是否提供手機端預覽"
    ],
    "answer": "B",
    "explanation": "匯出業務邏輯至 JSON/Git 可讓團隊離線備份與遷移，也能做版本控制，是檢驗導出能力的核心指標。"
  },
  {
    "id": 6,
    "question": "某 No Code 平台使用者反映隨著用戶量激增，部分工作流程開始不穩定，下列何者最可能是原因？",
    "options": [
      "A. 平台 UI 設計不佳",
      "B. 基於共享資源的雲端架構在高負載下出現瓶頸",
      "C. 使用者沒有更新瀏覽器",
      "D. API 文件不完整"
    ],
    "answer": "B",
    "explanation": "No Code 平台通常依賴多租戶雲端架構，當業務量劇增時，可能因共享資源競爭而影響執行效能與穩定性。"
  },
  {
    "id": 7,
    "question": "如果企業未來預期需要高度客製化功能，但又想快速上線，最佳策略是？",
    "options": [
      "A. 只用 No Code，忽略客製化需求",
      "B. 直接手寫全套系統",
      "C. 在 Low Code 平台上構建核心流程，並針對複雜部分進行自訂開發",
      "D. 同時使用多種 No Code 平台"
    ],
    "answer": "C",
    "explanation": "Low Code 平台兼具可視化和程式擴充，能在快速交付與後續客製化間取得平衡。"
  },
  {
    "id": 8,
    "question": "在評估 No Code/Low Code 平台的總擁有成本（TCO）時，下列哪項最常被企業忽略，卻對整體成本影響重大？",
    "options": [
      "A. 服務器電費",
      "B. 平台升級與維護費用",
      "C. 員工培訓與流程重塑成本",
      "D. 二次開發或遷移成本"
    ],
    "answer": "C",
    "explanation": "除了明顯的授權與運維費用外，員工培訓與流程重塑往往因為是「隱性成本」而被忽略，實際上卻是推動平台成功導入、確保使用效率的關鍵。"
  },
  {
    "id": 9,
    "question": "團隊發現 Low Code 平台對高頻大量資料處理支援不佳，最合理的補救方式是？",
    "options": [
      "A. 將該部分工作流程遷移到專屬微服務中處理，再與平台整合",
      "B. 降低資料處理頻率",
      "C. 停用相關功能",
      "D. 重寫整個平台"
    ],
    "answer": "A",
    "explanation": "結合微服務架構處理高頻大數據，可保留低程式碼優勢且維持效能穩定，符合漸進式整合思路。"
  },
  {
    "id": 10,
    "question": "若評估報告指出 No Code 平台在法規遵從方面不足，下列何者為適當的治理建議？",
    "options": [
      "A. 直接替換平台",
      "B. 增加內部流程審批與審計機制，並利用平台 API 做補強",
      "C. 停止使用平台",
      "D. 忽略法規要求"
    ],
    "answer": "B",
    "explanation": "結合內部審批、審計與外部合規工具，可在不更換平台的前提下補足合規風險管理。"
  },
  {
    "id": 11,
    "question": "某電商希望自動為新上架商品生成詳盡描述，下列工具組合最合適？",
    "options": [
      "A. Midjourney + Jukebox",
      "B. ChatGPT + OpenAI API 的 text-davinci-003",
      "C. GitHub Copilot + VS Code for Copilot",
      "D. Tableau + Power BI"
    ],
    "answer": "B",
    "explanation": "text-davinci-003 擅長高品質文本生成，配合 ChatGPT 互動可快速產生流暢且具備行銷說服力的商品描述。"
  },
  {
    "id": 12,
    "question": "若要為遊戲角色自動生成背景音樂與音效，下列哪組工具最適合？",
    "options": [
      "A. OpenAI Jukebox + custom sound effect dataset",
      "B. Midjourney + ChatGPT",
      "C. GitHub Copilot + Python",
      "D. VS Code for Copilot + SQL"
    ],
    "answer": "A",
    "explanation": "Jukebox 可生成音樂樣本，結合自訂音效資料集與參數調整，可創作專屬遊戲背景音。"
  },
  {
    "id": 13,
    "question": "在圖像生成任務中，使用 Midjourney 輸出多版本草圖時，下列哪項參數最能控制風格一致性？",
    "options": [
      "A. model",
      "B. seed",
      "C. temperature",
      "D. max_tokens"
    ],
    "answer": "B",
    "explanation": "seed 參數固定隨機種子，可在多次生成中保有相同初始噪聲，從而維持風格與構圖一致。"
  },
  {
    "id": 14,
    "question": "若開發者希望在 VS Code 中使用 Copilot 生成註解與範例，最應善用哪種提示策略？",
    "options": [
      "A. 在程式碼文件中插入「/// TODO: implement feature」",
      "B. 直接敲擊鍵盤隨意觸發",
      "C. 在注釋中描述函式用途與參數細節",
      "D. 關閉所有擴充功能"
    ],
    "answer": "C",
    "explanation": "Copilot 依賴上下文理解，清晰的注釋與目的說明能引導其生成符合預期的註解和範例。"
  },
  {
    "id": 15,
    "question": "公司要為線上教學平台生成互動式練習題，下列哪種工具/方法最合適？",
    "options": [
      "A. Midjourney",
      "B. ChatGPT 結合自訂題庫與 RAG",
      "C. GitHub Copilot",
      "D. Excel 巨集"
    ],
    "answer": "B",
    "explanation": "RAG 流程先檢索現有題庫與教學大綱，再由 ChatGPT 生成新題型，能兼顧內容準確與多樣化。"
  },
  {
    "id": 16,
    "question": "團隊希望生成式模型針對特定領域用語輸出更專業文本，下列哪種做法最有效？",
    "options": [
      "A. 提高 temperature 至 1.0",
      "B. 進行少量領域專用資料微調（fine-tuning）",
      "C. 只使用預設 prompt",
      "D. 減少 token 限制"
    ],
    "answer": "B",
    "explanation": "微調可讓模型學習領域特定語料與風格，比僅修改 prompt 更能提高專業度與一致性。"
  },
  {
    "id": 17,
    "question": "在設計多階段 Prompt Chain 時，若第 1 階段是「摘要長文檔」，第 2 階段要「提出關鍵問題」，最重要的串接方式是？",
    "options": [
      "A. 直接使用相同 prompt",
      "B. 將第一階段輸出完整放入第二階段上下文",
      "C. 只傳遞部分關鍵字",
      "D. 不關注上下文連貫"
    ],
    "answer": "B",
    "explanation": "保留完整摘要內容作為上下文，能讓第二階段模型正確識別並基於摘要提問。"
  },
  {
    "id": 18,
    "question": "若要讓模型在回答中引用外部知識並標記來源，最合適的「指令風格」為？",
    "options": [
      "A. 「自由發揮」",
      "B. 「請根據以下文本並在句末以 [來源] 標註原文段落」",
      "C. 「少字多圖」",
      "D. 「無需引用」"
    ],
    "answer": "B",
    "explanation": "明確要求引用並示範標註格式，能提升模型在生成中附帶來源的可靠性與可追溯性。"
  },
  {
    "id": 19,
    "question": "團隊發現模型若 prompt 太長容易超出 token 限制，最佳解決方案是？",
    "options": [
      "A. 強行增加 max_tokens",
      "B. 先用摘要模組壓縮上下文，再進行主要任務",
      "C. 刪除所有系統訊息",
      "D. 直接重啟服務"
    ],
    "answer": "B",
    "explanation": "使用摘要模組可將長文本濃縮為關鍵要點，既保留核心資訊又減少 token 使用。"
  },
  {
    "id": 20,
    "question": "在多人協同優化提示時，哪種流程最有助於追蹤每次改動效果？",
    "options": [
      "A. 把所有提示寫在同一份文件末尾",
      "B. 使用版本控制（如 Git）管理 prompt 文件並撰寫提交註解",
      "C. 口頭討論後直接更改",
      "D. 不做任何記錄"
    ],
    "answer": "B",
    "explanation": "Git 等版本控制系統能記錄每次更改內容、時間與原因，並允許回溯，便於協作與效果比較。"
  },
  {
    "id": 21,
    "question": "若需比較兩個模型處理中文長文本摘要的效果，下列哪項指標最能綜合衡量？",
    "options": [
      "A. BLEU 分數",
      "B. ROUGE-L 與人工可讀性評分結合",
      "C. API 延遲時間",
      "D. 模型檔案大小"
    ],
    "answer": "B",
    "explanation": "ROUGE-L 可量化自動摘要與參考答案重疊度，加上人工可讀性評分，能同時覆蓋準確度與流暢度。"
  },
  {
    "id": 22,
    "question": "在進行成本效益分析時，若要衡量「業務價值」，可使用哪項 KPI？",
    "options": [
      "A. 系統啟動時間",
      "B. 透過 AI 自動化減少的人工工時量",
      "C. 平台 logo 大小",
      "D. 訓練集行數"
    ],
    "answer": "B",
    "explanation": "減少重複性工作由 AI 接手，可直接轉換為成本節省與效率提升，是衡量價值的有效指標。"
  },
  {
    "id": 23,
    "question": "公司要在多個供應商間選型，需同時考量法規合規與效能，下列哪種報告最全面？",
    "options": [
      "A. 只列出效能基準",
      "B. 同步列出效能測試值、合規審查結果及安全測試報告",
      "C. 僅引用廠商宣傳資料",
      "D. 僅列價格對比"
    ],
    "answer": "B",
    "explanation": "嚴謹選型須綜合性能、合規風險及安全狀況，以確保在真實場景中穩定且合法運行。"
  },
  {
    "id": 24,
    "question": "在測試模型多輪對話的「記憶力」時，哪種方法最具代表性？",
    "options": [
      "A. 每輪都重新輸入完整上下文",
      "B. 模擬 10 輪以上，檢查模型是否能正確回應前 1 輪提及的實體信息",
      "C. 只做 1 輪對話",
      "D. 不測試多輪"
    ],
    "answer": "B",
    "explanation": "多輪超過 5–10 輪後仍能正確提及早期訊息，才能證明在真實對話中對上下文的長期保持能力。"
  },
  {
    "id": 25,
    "question": "在評估生成式 AI 的健壯性時，下列哪種擾動測試最常用？",
    "options": [
      "A. 更改 API 地址",
      "B. 在 prompt 中插入無關詞或噪聲，觀察模型回應是否穩定",
      "C. 提高硬體溫度",
      "D. 改變平台主題色"
    ],
    "answer": "B",
    "explanation": "透過在 prompt 中添加干擾詞，檢驗模型能否保持核心任務表現，是測試對抗健壯性的常用方法。"
  },
  {
    "id": 26,
    "question": "如果專案時間被壓縮為一個月，下列哪項最應優先完成？",
    "options": [
      "A. 全面員工培訓",
      "B. 最小可行樣板（MVP）＋核心目標驗證",
      "C. 建立完整運維團隊",
      "D. 完整撰寫所有文件"
    ],
    "answer": "B",
    "explanation": "壓縮時程下先驗證核心價值與可行性，再根據結果決定後續擴展，能有效降低風險。"
  },
  {
    "id": 27,
    "question": "在設定生成式 AI 專案 KPI 時，何者不宜列為首要指標？",
    "options": [
      "A. 使用者滿意度",
      "B. 系統平均延遲",
      "C. 每月開發票數",
      "D. 目標業務轉換率提升"
    ],
    "answer": "C",
    "explanation": "“開發票數”與業務價值無直接關係，應聚焦使用者體驗、性能與業務效益指標。"
  },
  {
    "id": 28,
    "question": "若要推動生成式 AI 在組織中普及，下列哪項做法最有助於改變員工觀念？",
    "options": [
      "A. 強制所有人使用新系統",
      "B. 舉辦實戰工作坊並展示成功案例",
      "C. 只發布內部公告",
      "D. 禁止質疑與建議"
    ],
    "answer": "B",
    "explanation": "實戰演練和案例分享能讓員工直觀感受效益，增強信心並自發採用新技術。"
  },
  {
    "id": 29,
    "question": "在規劃階段若發現需求不明確，應立即？",
    "options": [
      "A. 直接進入開發",
      "B. 舉行跨部門需求澄清會議，細化需求",
      "C. 放棄專案",
      "D. 讓團隊自行揣摩"
    ],
    "answer": "B",
    "explanation": "需求不明確會導致開發返工與方向偏差，應及早召開會議統一認知並產出需求文件。"
  },
  {
    "id": 30,
    "question": "在生成式 AI 系統部署後的首月監控中，下列何者為關鍵監控項？",
    "options": [
      "A. 系統日誌量",
      "B. 模型回應正確率、系統可用率與錯誤率",
      "C. 員工打卡時間",
      "D. 版本號是否更新"
    ],
    "answer": "B",
    "explanation": "回應正確率、可用率與錯誤率直接反映系統穩定性與性能，是部署後最重要的運維指標。"
  },
  {
    "id": 31,
    "question": "為防止模型將敏感個資洩露在回應中，下列哪項技術最有效？",
    "options": [
      "A. 加大訓練集尺寸",
      "B. 部署輸出過濾器（output filter）檢測並刪除 PII",
      "C. 提高學習率",
      "D. 減少 prompt 長度"
    ],
    "answer": "B",
    "explanation": "輸出過濾器能在生成結果中自動偵測並移除個資，防止不當資訊外洩。"
  },
  {
    "id": 32,
    "question": "模型運行半年後出現新法律條款要求用戶同意，下列何者屬於合規更新流程？",
    "options": [
      "A. 不理會新條款",
      "B. 更新使用者介面並在輸入前加入同意機制",
      "C. 停用所有功能",
      "D. 只在內部文件記錄"
    ],
    "answer": "B",
    "explanation": "透過 UI 流程強制用戶同意新條款，並更新隱私政策與合規文檔，才能合法收集與處理資料。"
  },
  {
    "id": 33,
    "question": "若發現生成式 AI 輸出系統性歧視某群體，下列哪種方法最有助於糾正？",
    "options": [
      "A. 完全停止提供服務",
      "B. 收集更多該群體的訓練數據並重新微調模型",
      "C. 刪除所有群體標籤",
      "D. 增加模型參數數量"
    ],
    "answer": "B",
    "explanation": "新增多樣化且平衡的數據能糾正模型對特定群體的偏見，並透過微調改善公平性。"
  },
  {
    "id": 34,
    "question": "在生成式 AI 的事故響應流程中，何者不屬於第一輪行動？",
    "options": [
      "A. 隔離受影響服務",
      "B. 通知法律與資安團隊",
      "C. 公開詳細事故原因",
      "D. 啟動應變計劃"
    ],
    "answer": "C",
    "explanation": "初期需先控制事故並保護資料，再進行內部調查，對外溝通要先確保資訊準確，避免誤導。"
  },
  {
    "id": 35,
    "question": "長期監控模型漂移時，哪些指標最應該重點追踪？",
    "options": [
      "A. 訓練集大小",
      "B. 輸入數據分布統計與回應性能指標變化",
      "C. API 文檔版本",
      "D. 員工出勤率"
    ],
    "answer": "B",
    "explanation": "比較當前輸入與訓練數據的分布差異，以及模型在真實場景下性能的變化，才能及早發現與修復漂移。"
  }
]
